@echo off
echo ========================================
echo  INSTALAR LIBRER√çAS .NET PARA POWERSHELL
echo  Interface de Gesti√≥n para Vigencias
echo ========================================
echo.

echo [1/6] Verificando .NET Runtime...
dotnet --list-runtimes | findstr "Microsoft.NETCore.App 8.0" >nul 2>&1
if %errorlevel% neq 0 (
    echo ‚ùå ERROR: .NET 8.0 Runtime no est√° instalado
    echo.
    echo INSTRUCCIONES DE INSTALACI√ìN:
    echo 1. Ve a: https://dotnet.microsoft.com/download/dotnet/8.0
    echo 2. Descarga ".NET 8.0 Runtime" ^(NO SDK^)
    echo 3. Instala con configuraci√≥n por defecto
    echo 4. Reinicia el ordenador
    echo 5. Ejecuta este script de nuevo
    echo.
    pause
    exit /b 1
)
echo ‚úÖ .NET 8.0 Runtime encontrado

echo.
echo [2/6] Verificando PowerShell...
powershell -Command "Write-Host 'PowerShell OK'" >nul 2>&1
if %errorlevel% neq 0 (
    echo ‚ùå ERROR: PowerShell no est√° disponible
    pause
    exit /b 1
)
echo ‚úÖ PowerShell disponible

echo.
echo [3/6] Creando directorio de librer√≠as...
if not exist "libs" (
    mkdir libs
    echo ‚úÖ Directorio 'libs' creado
) else (
    echo ‚úÖ Directorio 'libs' ya existe
)

echo.
echo [4/6] Verificando librer√≠as existentes...
set FOUND_LIBS=0

if exist "libs\System.Runtime.CompilerServices.Unsafe.dll" (
    echo ‚úÖ System.Runtime.CompilerServices.Unsafe.dll - ENCONTRADO
    set /a FOUND_LIBS+=1
) else (
    echo ‚ùå System.Runtime.CompilerServices.Unsafe.dll - FALTANTE ^(CR√çTICO^)
)

if exist "libs\System.Threading.Tasks.Extensions.dll" (
    echo ‚úÖ System.Threading.Tasks.Extensions.dll - ENCONTRADO
    set /a FOUND_LIBS+=1
) else (
    echo ‚ùå System.Threading.Tasks.Extensions.dll - FALTANTE
)

if exist "libs\System.Text.Json.dll" (
    echo ‚úÖ System.Text.Json.dll - ENCONTRADO
    set /a FOUND_LIBS+=1
) else (
    echo ‚ùå System.Text.Json.dll - FALTANTE
)

if exist "libs\System.Configuration.ConfigurationManager.dll" (
    echo ‚úÖ System.Configuration.ConfigurationManager.dll - ENCONTRADO
    set /a FOUND_LIBS+=1
) else (
    echo ‚ùå System.Configuration.ConfigurationManager.dll - FALTANTE
)

if exist "libs\FirebirdSql.Data.FirebirdClient.dll" (
    echo ‚úÖ FirebirdSql.Data.FirebirdClient.dll - ENCONTRADO
    set /a FOUND_LIBS+=1
) else (
    echo ‚ùå FirebirdSql.Data.FirebirdClient.dll - FALTANTE ^(CR√çTICO^)
)

if exist "libs\MySql.Data.dll" (
    echo ‚úÖ MySql.Data.dll - ENCONTRADO
    set /a FOUND_LIBS+=1
) else (
    echo ‚ùå MySql.Data.dll - FALTANTE
)

echo.
echo [5/6] Estado de librer√≠as: %FOUND_LIBS%/6 encontradas

if %FOUND_LIBS% geq 4 (
    echo.
    echo üéâ ¬°LIBRER√çAS SUFICIENTES PRESENTES!
    if %FOUND_LIBS%==6 (
        echo ‚úÖ Todas las librer√≠as est√°n disponibles
        echo ‚úÖ Soporte completo para Firebird y MySQL
    ) else (
        echo ‚ö†Ô∏è  Algunas librer√≠as opcionales faltan pero el sistema funcionar√°
    )
    echo.
    echo Ya puedes usar el bridge PowerShell
    echo.
    echo Para probar la conexi√≥n:
    echo   powershell -ExecutionPolicy Bypass -File test_connection.ps1
    echo.
) else (
    echo.
    echo ‚ö†Ô∏è  FALTAN LIBRER√çAS CR√çTICAS
    echo.
    echo üìñ INSTRUCCIONES PARA OBTENER LAS LIBRER√çAS:
    echo.
    echo M√âTODO 1 - Proyecto Temporal ^(RECOMENDADO^):
    echo 1. Abrir PowerShell en un directorio temporal
    echo 2. Ejecutar: dotnet new console -n FirebirdLibs
    echo 3. Ejecutar: cd FirebirdLibs
    echo 4. Ejecutar: dotnet add package FirebirdSql.Data.FirebirdClient --version 10.3.1
    echo 5. Ejecutar: dotnet add package MySql.Data --version 8.2.0
    echo 6. Ejecutar: dotnet add package System.Threading.Tasks.Extensions --version 4.5.4
    echo 7. Ejecutar: dotnet add package System.Text.Json --version 8.0.5
    echo 8. Ejecutar: dotnet add package System.Configuration.ConfigurationManager --version 8.0.1
    echo 9. Ejecutar: dotnet build
    echo 10. Copiar DLL desde bin\Debug\net8.0\ a este directorio libs\
    echo.
    echo M√âTODO 2 - Descarga Manual desde NuGet:
    echo 1. Ve a: https://www.nuget.org/packages/FirebirdSql.Data.FirebirdClient/10.3.1
    echo 2. Clic en "Download package"
    echo 3. Renombrar .nupkg a .zip y extraer
    echo 4. Copiar DLL desde lib\net6.0\ a libs\
    echo 5. Repetir para cada paquete
    echo.
    echo LIBRER√çAS REQUERIDAS:
    echo - FirebirdSql.Data.FirebirdClient ^(v10.3.1^) - CR√çTICO
    echo - System.Runtime.CompilerServices.Unsafe ^(v6.0.0^) - CR√çTICO
    echo - System.Threading.Tasks.Extensions ^(v4.5.4^)
    echo - System.Text.Json ^(v8.0.5^)
    echo - System.Configuration.ConfigurationManager ^(v8.0.1^)
    echo - MySql.Data ^(v8.2.0^) - Para MySQL
)

echo.
echo [6/6] Informaci√≥n del sistema:
echo üìÅ Directorio actual: %CD%
echo üìÅ Directorio libs: %CD%\libs
echo üñ•Ô∏è  Sistema: %OS% %PROCESSOR_ARCHITECTURE%
echo ‚ö° .NET Runtime: 
dotnet --list-runtimes | findstr "Microsoft.NETCore.App 8.0"
echo.

if %FOUND_LIBS% geq 4 (
    echo üöÄ SISTEMA LISTO PARA USAR
    echo.
    echo Comandos disponibles:
    echo   - Probar Firebird: powershell -ExecutionPolicy Bypass -File test_connection.ps1
    echo   - Ver ayuda: powershell -ExecutionPolicy Bypass -File FirebirdBridge.ps1 -Operation help
) else (
    echo ‚ö†Ô∏è  SISTEMA NO LISTO - Instala las librer√≠as faltantes
)

echo.
pause